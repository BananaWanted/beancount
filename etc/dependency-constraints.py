#!/usr/bin/env python3
"""Enforce ordering of the dependencies.

We generate the dependency order with snakefood.
In this script, we ensure that the expected set of dependencies aren't violated.
"""
import argparse
import logging
import re
import sys
from os import path


ALLOWED = [
    ('beancount/.*_test$', 'beancount/loader'),
    ('beancount/.*_test$', 'beancount/utils'),

    ('beancount/loader', 'beancount/(core|utils|parser|ops)'),

    ('beancount/core', 'beancount/(core)'),
    ('beancount/core/.*_test', 'beancount/parser'),

    ('beancount/parser', 'beancount/(core|parser)'),

    ('beancount/ops', 'beancount/(core|utils|ops)'),
    ('beancount/ops/.*_test', 'beancount/parser'),

    ('beancount/plugins', 'beancount/(core|parser|ops|plugins)'),

    ('beancount/reports', 'beancount/(core|utils|ops|parser|reports)'),

    ('beancount/query', 'beancount/(core|utils|ops|parser|query)'),

    ('beancount/scripts', 'beancount/(core|utils|parser|web|ops|loader$|reports|query|scripts)'),
    ('beancount/web', 'beancount/(core|utils|parser|ops|loader$|reports|web)'),

    ('beancount/projects', 'beancount/(core|utils|parser|web|ops|loader$|reports|scripts)'),
    ('beancount/projects/.*_test', 'beancount/(projects)'),
    ]


def main():
    logging.basicConfig(level=logging.INFO, format='%(levelname)-8s: %(message)s')
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('dependencies',
                        help='The dependencies file generated by snakefood')
    opts = parser.parse_args()

    root = path.join(path.dirname(path.dirname(path.join(path.abspath(__file__)))),
                     'src', 'python')

    has_errors = False
    for line in open(opts.dependencies):
        ((from_dir, from_file), (to_dir, to_file)) = eval(line)
        if to_dir is None:
            continue
        if from_dir != root or to_dir != root:
            continue
        from_file = from_file.replace('.py', '')
        to_file = to_file.replace('.py', '')

        # If there's a single rule that matches, pass the dependency.
        if any(re.match(from_regex, from_file) and re.match(to_regex, to_file)
               for (from_regex, to_regex) in ALLOWED):
            continue

        # Failed!
        logging.error('Invalid dependency:  {:40} -> {:40}'.format(from_file, to_file))
        has_errors = True

    sys.exit(1 if has_errors else 0)


if __name__ == '__main__':
    main()
