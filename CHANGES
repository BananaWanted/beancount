========================
   beancount: CHANGES
========================
Note: This file contains only changes in the 'default' branch.


2015-04-13

  - A minor improvment to bean-format has been implemented: Whitespace before
    postings is now automatically normalized to the most frequent spacing
    present in the document. This allows you to be somewhat sloppy on the
    postings themselves when entering new transactions.


2015-02-16

  - Finally completed documentation on how to export your portfolio to Google
    Finance, as
    http://furius.ca/beancount/doc/export,
    or equivalently as
    https://docs.google.com/document/d/1eZIDRmQZxR6cmDyOJf7U3BnCm4PDMah2twxYFfKPJtM/


2015-02-10

  - Revamped the export-to-OFX report to showcase a more explicit, flexible and
    easily debuggable configuration. Also supports the declaration of money
    instrument equivalents within the file itself. This will be documented here:
    https://docs.google.com/document/d/1eZIDRmQZxR6cmDyOJf7U3BnCm4PDMah2twxYFfKPJtM/


2015-02-03

  - Fixed an unreported bug with Emacs support whereby a number appearing within
    a narration string would get aligned along with the other amounts.


2015-02-01

  - Implemented an "include" directive. The include directive does not parse the
    files in order... rather, each parse run on an input file accumulates the
    list of includes to be parsed and processed the includes after parsing the
    file. Because we're order independent, this should work. Note however that
    the options should be set in the root file.

    This is documented here:
    https://docs.google.com/document/d/1wAMVrKIA2qtRGmoVDSUBJGmYZSygUaR0uOMW1GV3YE0/edit#heading=h.86lelow4097r


2015-01-24

  - I created a new branch 'ledgerhub' to provide a version of Beancount that i
    guaranteed to be compatible with LedgerHub.

    Previously, LedgerHub was synchronizing a copy of some of the files under
    beancount.core in order to avoid depending on Beancount. This turned out to
    be difficult to maintain, as Beancount is still evolving relatively fast. So
    I've decided to return to the original state of affairs: LedgerHub will
    depend on a Beancount install in order to reuse its core libraries. (The
    original reason for not doing so was that I thought I'd want to fork
    those core libraries to support Ledger-specific features, but at this point
    it's dubious whether I will need that at all --or whether I couldn't just
    add generic support in Beancount's core libraries themselve to do that-- and
    this will be an easier way to synchronize the two codebases going forward).

    If you're a LedgerHub user, please checkout Beancount at its 'ledgerhub'
    branch and make your PYTHONPATH depend on that.


2015-01-22

  - Added a dependency check for PLY and documented in the Install doc
    (http://furius.ca/beancount/doc/install).


2015-01-18

  - Added a new, optional "Commodity" directive, which can be used to declare
    commodity/currencies/instruments. The real purpose of this optional
    directive is to hang per-commodity meta-data off of them. Some scripts are
    much simplified by being able to define custom attributes for each
    commodity, e.g. "name", "asset-class", "currency-exposure", and such. There
    is a new function beancount.core.getters.get_commodity_map() which can be
    used to gather a map of commodity to metadata.

    You otherwise don't have to add those declarations; the new directive is
    entirely optional and its addition should not break any existing feature
    nor input file. It is an error to insert duplicate Commodity directives
    for the same commodity name. I'm mainly doing this now so I can migrate
    the portfolio dashboard script from experiments into the mainline while
    configuring it using metadata.

    The directive is documented here:
    http://furius.ca/beancount/doc/language#heading=h.a3si01ejc035


  - I added a development dependency on pyflakes and validated all code on
    'default' to pass a flawless pyflakes run.


2015-01-17

  - I added a paragraph about Releases in the Install document. Basically, I
    don't do releases: the "default" branch is stable, just clone on "default"
    and update regularly, I do all "risky" feature development in branches and
    only merge to "default" when fully stable. All major changes on "default"
    are announced in this file.


2015-01-11

  - **IMPORTANT** Fixed an inconsistency with the signs of total cost syntax,
    like this:

        <account>          -1000 USD @@ -1123.24 CAD

    It was required to use the negative sign in order to get the correct value.
    This makes no sense: per-unit cost and price amounts were unsigned, and total
    cost values were only allowed to be positive. Also, Ledger requires all
    costs and prices to be positive/unsigned, which could be confusing for
    Ledger users. I had no particularly good reason to require the same sign
    for total cost: this was only an oversight.

    So I changed this so that total price, like total cost, per-unit price,
    per-unit cost, are all positive/unsigned. An error is now raised i a price
    or cost, total or per-unit, are provided negative. You need to convert your
    input files to unsigned values, like this (for the above example):

        <account>          -1000 USD @@ 1123.24 CAD

    If you pull this change and have negative total prices, your input file will
    break. In order to circumvent the change, you may set the
    BEANCOUNT_ALLOW_NEGATIVE_PRICES environment variable. I will remove this
    workaround in a few months.
    (This bug reported by Matthew Harris.)

  - Fixed a bug when total cost {{...}} syntax was being used with a negative
    number of units: it would raise an error, although it was legal to do so.
    For example, this is legal and was raising an error:

        <account>          -10 MSFT {{455.24 USD}}

    It probably did not show up much because few people use the total cost
    method, and the tests happened only to use positive numbers of units.

  - Fixed issue #5: bug in beancount.plugins.leafonly plugin when posting to a
    non-leaf account that had no Open directive. (This bug reported by Nathan
    Grigg.)


2015-01-04

  - Merged the 'shell' branch into 'default', providing a new tool to extract
    information from a Beancount input file: bean-query. This is the first
    revision of the SQL-like query language for Beancount. Documentation for it
    is available under http://furius.ca/beancount/doc/query.


2014-12-28

  - Merged various functions (in beancount.ops.lifetimes) used to automatically
    compute the date intervals that particular commodities are in used. This is
    intended to be used to write scripts to automatically fetch all the price
    entries needed during the lifetime of a particular Ledger. A script has been
    created under experiments (src/experiments/fetch-missing-prices.py) which
    you should be able to modify to your favourite price fetcher.

  - The 'export_holdings' report now exports an extra holding as a cash
    equivalent mutual fund in order to take into account of the value of
    holdings that could not be converted to symbols the online portfolio
    manager software knows about. The cash position brings the portfolio to
    close to its total value.


2014-12-26

  - Merged the latest version of the 'display_context' branch into 'default'.
    These changes make the DisplayContext object a factory for DisplayFormatter
    objects which are then used to render numbers. This is a little more
    sophisticated than the previous approach and will be reusable in the
    rendering routines for the interactive SQL shell's result.


2014-12-25

  - The 'metadata' branch has been merged into 'default'. Metadata is now
    officially supported in Beancount.

    * Metadata can be created on all directives and postings. An attribute of
      '.meta' can be used to access all parsed metadata. The object is a dict
      which can also have its fields accessed via attributes.

    * The '.source' attribute on all directives has been removed and '.meta' now
      replaces it. The 'filename' and 'lineno' attributes which were previously
      available on the beancount.core.data.Source tuple have been folded into
      the metadata dict under the same names.

    * Metadata values can be of various datatypes and these will be parsed and
      available in Python:

      - Strings
      - Account names (appears as str)
      - Currency (appears as str)
      - Dates (a datetime.date instance)
      - Tags (appears as str)
      - Numbers (a decimal.Decimal instance)
      - Amount (a beancount.core.amount.Amount instance)

    * Attributes without a value will be parsed and have a value of 'None'. If
      an attribute is repeated multiple times, only the first value for this
      attribute will be parsed and retained.

    * Apart from the 'filename' and 'lineno' attributes, no other "special"
      usage of metadata will be made by Beancount. Metadata is intended to be
      for the user to attach arbitrary data to directives. The query language
      will eventually support query arbitrary metadata attributes, but no special
      meaning will be assumed.



2014-12-19

  - Created a new "export_holdings" report type that spits out an OFX format of
    the holdings that can be consumed by external portfolio definition services
    such as Google Finance (for example). This is useful, as it allows you to
    monitor changes in your portfolio from a mobile device.

    Note that in some of these services, a commodity that isn't a valid ticker
    symbol fails the import process. Also, a commodity that is a mutual fund
    recorded in the OFX file as a stock will similar fail the import process. We
    need to find a way to fetch this info from the file itself. When metadata
    will get merged, we should be able to get it from the account names, where
    we could attach a property to the account's corresponding Open directive.

    In the meantime, and as a kludge to start using this right away, place a
    note for each currency (at any date, in any account) with the text in the
    following format:

       YYYY-MM-DD note <account> "Export <commodity>: IGNORE"
       YYYY-MM-DD note <account> "Export <commodity>: MUTUAL_FUND"

    This will get removed later.



2014-12-07

  - After much more work on the SQL query language (in 'shell' branch), I need
    to access Inventory positions by index, so I removed the getitem ([])
    operator from Inventory, which was unused in the codebase. (If you have
    scripts this *may* affect you; translate calls to [] into calls to
    .get_position()).



2014-11-29

  - Completed work on calculating returns (merged branch 'returns' into
    default). I created a new package called "projects" to hold these special
    tasks, those that don't integrate in the plugins framework, and created a
    beancount.projects.returns library that can be inovoked as a script, like
    this:

      python3 -m beancount.projects.returns <filename.beancount> ...

    For the arguments, you will have to read the docstring. You essentially need
    to provide two or three regular expressions to list the set of accounts
    that define you portfolio as well as other lists of accounts that should be
    considered internal flows. See the docstring for details. I will eventually
    move much of that explanation into a Google Doc and detail it in more depth.

    There is also a script that runs it on the example beancount file, as well
    as examples in the unit tests.


2014-11-27

  - Started the "booking" branch which will implement the
    http://furius.ca/beancount/doc/proposal-booking proposal. The first step was
    to add an argument to the Open directive to specify the default booking
    method to use when there are either 0, 2 or more matching lots in an
    inventory. The only value supported by this are currently "STRICT" (the
    default) or "NONE" which effectively disables inventory booking and is
    equivalent to Ledger's method of accumulating lots. The new syntax looked
    like this and is backward compatible with previous synta for it:

      YYYY-MM-DD open <account>   [<commodities>]  ["<booking-method>"]

    Though the result may be inventories with positive and negative positions in
    the same commodity, this is useful for working with accounts booked at their
    average cost (until we have correct treatment of basis for those with
    dedicated syntax for merging lots). The total number of units and the total
    cost should be correct.

    This state of the 'booking' branch was merged into the 'default' branch,
    which is why it appears in this CHANGE entry.


2014-11-21

  - Merged "metadata" branch into default, Beancount now parses the metadata but
    does not store it anywhere. This was done so that early adopters can start
    to enter metadata right away even if it is not usable yet.


2014-11-13

  - Added a new "beancount.plugins.ira_contribs" module that automatically
    inserts postings for tracking pre-tax money contributions.


2014-11-11

  - The precision of rendered numbers isn't quantized nor subject to hard-coded
    maximums anymore. I cleaned this up. There is a new "DisplayContext" object
    that maintains the most common and maximum precisions to be used to render
    each currency, and this precision is derived automatically from the numbers
    used in the input file (the most common is the mode of the distribution of
    numbers seen). The alignment of the printer's amounts is now also fixed (it
    rendered correct transactions lately but alignment was a little borked), and
    the output is now kept as tightly as possible close to the account names.

  - Numbers don't render with commas by default anymore. There is a new option:
    'render_commas' that you can set to have commas in numbers rendered in all
    the routines that output numbers.


2014-11-09

  - A new directive has been created: "plugin" that accepts the an optional
    plugin-configuration string. Instead of

      option "plugin" "<module>"
      option "plugin" "<module>:<config>"

    Now use:

      plugin "<module>"
      plugin "<module>" "<config>"

    The plugin option will remain functional for a while. The configuration
    string is as previously a free-form string whose meaning is to be defined by
    the plugin itself.

  - The parser now stores the distribution of the precisions of all the numbers
    it parses, and this adds a little bit of overhead (about 4%). With a large
    file, you might notice a little tiny bit of extra slowness. The reason I
    created this is in order to automatically infer reasonable defaults for the
    display precision (used in the SQL shell at the moment).

  - Renamed the 'bean-query' tool to 'bean-report'. There is a good reason for
    this: there is a new tool coming that will provide an command-shell to make
    interactive queries on your ledger contents. This tool will be
    called--appropriately--"bean-query". I decided that the two tools should be
    separate: "bean-report" will be used to render custom-coded reports (nothing
    changes), and "bean-query" will be used to build reports out of SQL-like
    queries. I'm hoping that eventually bean-query functionality will entirely
    subsume bean-report reports, but that is unclear at this point.

  - Made default rendering for changes and balances of HTML reports by units().
    Rendering all the lots was horrible in even moderately complex stock trading
    accounts with a few positions. Now we aggregate by currency ("units").

     In order for the user to be able to view the previously available lot
     detail from the web interface, we now provide a link to the "context",
     which is a link specific to a transaction that renders the balances for all
     the accounts just before the transaction is applied, and just after.

  - (Internal) Renamed beancount.core.complete to beancount.core.interpolate.
    I've been using the term interpolate for a while now, in the docs, and it's
    way more telling than complete.


(Beginning to summarize user-facing changes 2014-11-09.)
