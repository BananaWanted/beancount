#!/usr/bin/env python
"""
Read OANDA CSV report files and convert them into beancount syntax.
"""
import csv
import re
import pprint
from collections import defaultdict
from decimal import Decimal
import datetime


IGNORE_TRANSACTIONS = """
Buy Market
Buy Order
Change Margin
Change Order
Change Trade
Order Cancelled
Order Expired
Order Filled
Sell Order
""".strip().splitlines()

RELEVANT_TRANSACTIONS = """
API Fee
API License Fee
Buy Market Filled
Close Position
Close Trade
Fund Deposit
Fund Withdrawal
Fund Withdrawal (Transfer)
Interest
Sell Market
Sell Market Filled
Stop Loss
Stop Loss (Cancelled)
Take Profit
Trade Cancel
""".strip().splitlines()


def dict_reader(filename):
    reader = csv.DictReader(open(filename))
    reader.fieldnames = [re.sub('[^a-z]', '_', x.lower()).strip(' _') for x in reader.fieldnames]
    return reader


def find_changing_types(filename):
    bytype = defaultdict(list)
    for obj in dict_reader(filename):
        txntype = obj['transaction']
        bytype[txntype].append(obj)

    unchanging_types = set(bytype.keys())
    prev_balance = Decimal()
    for obj in dict_reader(filename):
        balance = obj['balance'].strip()
        if balance and balance != prev_balance:
            if obj['transaction'] in unchanging_types:
                print obj
            unchanging_types.discard(obj['transaction'])
            prev_balance = balance

    print "Unchanging types:"
    for txntype in unchanging_types:
        print txntype
    print

    print "Changing types:"
    changing_types = set(bytype.keys()) - unchanging_types
    for txntype in changing_types:
        print txntype
    print


def get_number(obj, aname):
    str_value = obj[aname].strip()
    if str_value:
        return Decimal(str_value)
    else:
        return Decimal()


def is_balanced_txn(obj):
    "Return true if the transaction is balanced."
    txntype = obj['transaction']
    return (not txntype.startswith('Fund ') and
            not txntype.startswith('API '))


ZERO = Decimal()
ONE_CENT = Decimal('0.01')


def format_transaction(date, ticket, description, currency, postings):
    return ("{date} * ({ticket}) {description}\n".format(**vars()) +
            '\n'.join("  {:48} {:14.4f} {}".format(account, amount, currency)
                      for (account, amount) in postings))


def guess_currency(filename):
    for obj in dict_reader(filename):
        if re.match('[A-Z]+$', obj['pair']):
            return obj['pair']


def main():
    import argparse, logging
    logging.basicConfig(level=logging.INFO, format='%(levelname)-8s: %(message)s')
    parser = argparse.ArgumentParser(__doc__.strip())
    parser.add_argument('filename', help='CSV filename')
    opts = parser.parse_args()

    ## return find_changing_types(opts.filename)

    currency = guess_currency(opts.filename)

    prev_balance = Decimal('0')
    for obj in dict_reader(opts.filename):
        ## print obj
        txntype = obj['transaction']
        if txntype in IGNORE_TRANSACTIONS:
            continue

        interest = get_number(obj, 'interest')
        pnl = get_number(obj, 'p_l')
        amount = get_number(obj, 'amount')
        other = None
        if is_balanced_txn(obj):
            assert interest + pnl == amount, (interest, pnl, amount)
        else:
            assert interest == ZERO
            assert pnl == ZERO
            other = amount
        del amount

        change = pnl + interest + (other or ZERO)
        balance = get_number(obj, 'balance')
        computed_balance = prev_balance + change
        # Note: there appears to be a bug in how the balance is reported in "Trade Cancel", use the computed value
        if (abs(computed_balance - balance) > ONE_CENT and
            txntype != 'Trade Cancel'):
            print (prev_balance, balance, change), (computed_balance - balance)
            print '   ', obj
        prev_balance = balance

        postings = []
        if pnl != ZERO:
            postings.append((ACC_PNL, -pnl))
        if interest != ZERO:
            postings.append((ACC_INTEREST, -interest))
        if other is not None:
            postings.append((ACC_OTHER, -other))
        postings.append((ACC_ASSET, change))

        date = datetime.datetime.strptime(obj['date'], '%B %d %H:%M:%S %Y %Z').date()
        txn = format_transaction(date, obj['ticket'], '{} - {}'.format(txntype, obj['pair']), currency, postings)

        if txntype != 'Interest':
            print txn
            print

ACC_ASSET    = 'Assets:US:OANDA:Primary'
ACC_INTEREST = 'Income:US:OANDA:Primary:Interest'
ACC_PNL      = 'Income:US:OANDA:Primary:PnL'
ACC_OTHER    = 'Assets:US:OANDA:Transfer'

# FIXME TODO:
# - Check that ignored transactions have zero amounts
# - Render tran link with @, and the ticket nuembr too
# - Compress the interest
# - Render the transaction prices
# - Automatically fill in accounts for API and deposits / transfers (based on the currency)
# - Add the positions taken into subaccounts, a large positive number and a large negative number, this should be possible, under e.g. 'Income:US:OANDA:Primary:Positions:EUR_USD'

if __name__ == '__main__':
    main()
