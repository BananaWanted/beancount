
    # if 0:
    #     import pandas
    #     positions_dataframe = pandas.DataFrame(positions, columns=['number', 'currency',
    #                                                                'cost_number', 'cost_currency', 'account'])
    #     #positions_dataframe = positions_dataframe.sort(['currency', 'cost_currency'])
    #     positions_dataframe = positions_dataframe.sort(['account'])
    #     print(positions_dataframe.to_string())
    #     # print(positions_dataframe.groupby('currency').sum().to_string())




    by_position = dataframe.groupby(['currency', 'cost_currency']).sum()
    by_position['price'] = (by_position['book_value'] / by_position['number']).astype(float)
    # by_position = by_position.reset_index()
    by_position.sort(['book_value'], inplace=True, ascending=False)

    latest_prices = get_latest_prices(entries)

    price_series = pandas.Series(index=by_position.index, dtype=Decimal)
    for index, row in by_position.iterrows():
        currency, cost_currency = index
        last_price = None
        try:
            price_entry = latest_prices[currency]
            assert price_entry.amount.currency == cost_currency
            last_price = price_entry.amount.number
        except KeyError:
            print(';; FETCHING {}'.format(currency))
            if cost_currency == 'CAD' and currency.startswith('RBF'):
                instrument = 'MUTF_CA:{}'.format(currency)
            elif cost_currency == 'CAD':
                instrument = 'TSE:{}'.format(currency)
            else:
                instrument = currency

            #http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22YHOO%22%2C%22AAPL%22%2C%22GOOG%22%2C%22MSFT%22)%0A%09%09&diagnostics=true&env=http%3A%2F%2Fdatatables.org%2Falltables.enva

            # response = urlopen("http://www.google.com/ig/api?stock={}".format(instrument))
            response = urlopen("http://finance.google.com/finance/info?client=ig&q={}".format(instrument))

            string = response.read().decode().strip()
            mo = re.match(r"// \[\n(.*)\]", string, re.DOTALL)
            json_string = mo.group(1)
            data = json.loads(json_string)
            last_price = Decimal(data['l'])

            # soup = bs4.BeautifulSoup(response, 'lxml')
            # # print(soup.prettify())
            # last_node = soup.find('last')
            # if last_node is not None:
            #     last_price = Decimal(last_node['data'])

            if 1:
                print('{} price {:8} {:>20}'.format(datetime.date.today(),
                                                    currency,
                                                    Amount(last_price, cost_currency)))
        if last_price:
            price_series[(currency, cost_currency)] = last_price

    by_position['mark'] = price_series
    by_position['market_value'] = by_position['number'] * by_position['mark']
    by_position['pnl'] = by_position['market_value'] - by_position['book_value']
    by_position['gain_pcent'] = (by_position['market_value'] / by_position['book_value'] - 1) * 100


    # by_position = pandas.merge(by_position, price_series,
    #                            left_index=True, right_index=True)

    oss = io.StringIO()
    oss.write(by_position.to_html(float_format='{:.2f}'.format))
    oss.write(dataframe.to_html(float_format='{:.2f}'.format))


    # FIXME: Group the positions by currency, show the price of each position in
    # the inventory (see year 2006 for a good sample input).

    # oss.write("<table class='positions'>\n")
    # oss.write("{}".format(total_balance.average()))

    ## FIXME: remove
    # print(('{p.number:12.2f} {p.lot.currency:8} '
    #        '{p.lot.cost.number:12.2f} {p.lot.cost.currency:8} '
    #        '{c.number:12.2f} {c.currency:8}').format(p=position, c=cost))

    # oss.write('''
    #   <div class="position num">
    #      {position}     {cost}
    #   </div>
    # '''.format(position=position, cost=position.get_cost()))

    # oss.write("</table>\n")

