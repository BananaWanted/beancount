#!/usr/bin/env python
"""
List the various cash transfers that can occur between accounts.
"""

# stdlib imports
import sys, re, cgi, logging
from datetime import date
from decimal import Decimal
from xml.sax.saxutils import unescape
from pprint import pprint, pformat

# other imports
from BeautifulSoup import BeautifulSoup, Tag

# beancount imports
from beancount import cmdline
from beancount.ledger import read_ofx_accounts_map

# fallback imports
from beancount.fallback.collections2 import namedtuple


def main():
    import optparse
    parser = optparse.OptionParser(__doc__.strip())

    parser.add_option('-d', '--debug', action='store_true',
                      help="Generate debug output.")

    global opts
    opts, ledger, args = cmdline.main(parser, 1)

    catset = set(['Assets', 'Liabilities'])
    ccyset = set(['USD', 'CAD', 'GBP', 'AUD', 'JPY', 'NIS'])
    ignores = [re.compile(x).match for x in (
        '.*:Cash$',
        '.*Payable$',
        '.*Receivable$',
        '.*:Contrib$',
        '.*:Transfer$',
        )]

    links = set()
    for txn in ledger.transactions:

        accounts = set(p.account for p in txn.postings if (
            p.amount and len(p.amount) == 1 and
            p.amount.tocomm() in ccyset and
            p.account.get_category_name() in catset and
            not any(fun(p.account.fullname) for fun in ignores)
            ))
        if len(accounts) > 1:
            links.add( tuple(sorted(x.fullname for x in accounts)) )

    for acclist in sorted(links):
        if len(acclist) != 2:
            raise ValueError("Account list is not a pair: %s" % str(acclist))

    graph(links, sys.stdout.write, 64)


#-------------------------------------------------------------------------------
prefix = '''
# This file was generated by sfood-graph.

strict graph "dependencies" {
    graph [
        rankdir = "LR",
        overlap = "scale",
        size = "8,10",
        ratio = "fill",
        fontsize = "16",
        fontname = "Helvetica",
        clusterrank = "local"
        ]

       node [
           fontsize=%s
           shape=box
       ];

'''
postfix = '''

}
'''

def graph(pairs, write, fontsize):
    "Given from, to pairs, output a dot graph."
    write(prefix % fontsize)
    lines = []
    for f, t in pairs:
        write('"%s" -- "%s";\n' % (f, t))
    write(postfix)



if __name__ == '__main__':
    main()
