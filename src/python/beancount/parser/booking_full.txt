There's a problem with the full booking method. Currently, it works like this
(pseudo-code):

  for each cost-currency group:
    book the reducing postings against the ante-inventory
    apply interpolation to fill in missing numbers, convert CostSpec to Cost

This is problematic, because of the following two conflicting goals:

(1) We want to book the reductions against the augmentations within the
  transaction. This means that if the Assets:Invest inventory is empty, this
  transaction should succeed:

     2016-12-04 *
       Assets:Invest     10 HOOL {50 USD}             ;; A
       Assets:Invest    -10 HOOL {50 USD} @ 72.00 USD ;; B
       Assets:Cash      220 USD
       Income:Profit

  In this transaction, [B] should reduce [A]. Currently, in the new full booking
  method, it doesn't.


(2) When a single number is missing from a currency group, we want to fill it in
  automatically. For example, this ought to work:

     2016-12-04 *
       Assets:Invest     10 HOOL {USD}
       Assets:Cash       -500 USD

  and should resolve the cost to 50 USD. Any single number can be filled in
  automatically.

  A special case of this, and this is the case that's causing us some problems
  w.r.t. to the problem described above, is that a reducing leg might be subject
  to this. For example, if the ante-inventory is this:

       Assets:Invest     10 HOOL {50 USD, 2016-01-01} ;; A
       Assets:Invest     10 HOOL {51 USD, 2016-01-02} ;; B

  this transaction should be legal:

     2016-12-04 *
       Assets:Invest    -5 HOOL {2016-01-02}
       Assets:Cash         USD

  This would first disambiguate the reduction to the [B] posting using the date,
  and then interpolate the missing number to figure out that the cash amount
  would be 5 x 51 = 255. It would result in this:

     2016-12-04 *
       Assets:Invest    -5 HOOL {51 USD, 2016-01-02}
       AssetCash       255 USD

  In short, two things occur: the reduction is matched against the available
  inventory lots, and then the interpolation is run.

  Moreover, another thing we'd like to be able to do is infer reduction numbers
  by interpolation, like this:

     2016-12-04 *
       Assets:Invest    -5 HOOL {}
       AssetCash       255 USD

  In this case, this would automatically infer that the cost is 51 USD in order
  to balance the transaction.


One solution would be to apply the augmentations before we run the reductions.
But that's impossible: some of those augmenting postings might have missing
numbers which need to be interpolated. It's like a dog chasing its own tail.

I haven't been able to come up with an elegant solution to this problem yet. I
need to find some compromise in the meantime.

Here's what we could do:

  (a) if there's an augmentation and a reduction of the same commodity in the
      same currency group

        For each cost-currency group:
          don't allow interpolation, but convert CostSpec to Cost
          apply all the augmentations
          book the reducing postings against the resulting inventory

  (b) if there aren't:

       For each cost-currency group:
         apply interpolation to fill in missing numbers, convert CostSpec to Cost
         book the reducing postings against the ante-inventory
