=====================
   beancount: TODO
=====================

.. contents::
..
    1  Beancount (Accounting)
    2  Ideas
      2.1  Links
    3  Redesign
    4  Idea for Integrating the Cost Basis in Beancount


Beancount (Accounting)
======================

  - Create importer library support in Python for writing beancount importers.
    See OANDA script to being. Formatting transactions should be code in common.
    Finding accounts with ids too.

  - Write a C parser with boost::python bindings.

  - How does cdecimal work? Can I use from C?

  - Write all the new beancount in Python 3!

  - Dont special case org-mode... Aything that doesnt start with a date or
    pushtag/poptag should be skipped; this should work with LaTeX or any
    of the text-modes.

  - With the new format... support includes, it makes a lot more sense to do
    that now!

  - The syntax should support multiline strings naturally...

  - Whether an account shows up in a particular Ledger (realization) really only
    should depend on whether the account was open during the period (we now have
    account open/close dates... let's use them instead of a heuristic!).

  - A new ledger mode should be able to

    * Automatically indent postings ("a line that begins with an account")
    * Highlight strings
    * Automatically align lines with currency numbers

  - Some syntax should be added for tags, e.g. ":tag", tags should all be moved
    to the description line, no tags allowed on postings

  - @location really should just convert into a generic event "location", just
    as address and school should; they're just events with forward fill...
    Serve this at:

       http://localhost:8080/20120101/20130101/events/location/days


  - Consider making the lot syntax like this:

       -4 {GOOG @ 790.83 USD}

    instead of:

       -4 GOOG {790.83 USD}

    It's actually a lot more accurate...

  - Constrain all accounts to begin with the 6 categories.

  - Support a category called "Misc:*" in order to deal with non-summable things
    like RRSP contributsions. There's no need to do anything else special, just
    goes to/from some Misc accounts.


  - Remove support for virtual postings, hack not needed anymore!
  - Remove support for BOOK <> IN ... do it now!


  - Support Ledger's aliases?
  - Support Ledger's "root account"?  I can only see it being useful for
    includes.

  - Change my syntax: start with date no matter what, everything has a date,
    simpler

  - Rename actual and effective to date and aux-date, like Ledger, I'm not even
    sure we do anything with the aux-date actually.

  - In order to create multiple similar transactions at many dates in one
    syntax' entry, you could allow overriding the date on each posting, e.g.:

       2013-04-01 * Blah di bla
         2013-01-01  Grocery          10 USD
         2013-02-01  Grocery          10 USD
         2013-03-01  Grocery          10 USD
         Cash

    This would create three transactions, with these dates:

        date           aux-date
        2013-01-01     2013-04-01     10 / 3.33
        2013-02-01     2013-04-01     ...
        2013-03-01     2013-04-01     ...

    Could be a nice way to make distributed transactions.


  - In the new design:

    * Split the concepts of "Account" (name, global attributes) and
      "AccountRealization" (list of postings and accumulated balances). A Ledger
      contains AccountRealization instances. There should be a global Ledger
      with AccountRealization's that contains all of the actual parsed postings.
      Other Ledger instances can be filtered from this one.  All the
      AccountRealization's share the same Account objects.

    * Wallet -> "Inventory". An "Inventory" contains "Lots", which are comprised
      of ((Commodity, Cost, Date) -> Amount) mappings, where Cost and Date may
      be null.

  - Matching on Inventory Lots should be loose: try to match automatically
    against the most SPECIFIC lots.

         (AAPL, 18.45, nil) -> +1
         (AAPL, 17.93, nil) -> +1
         (AAPL, nil, nil)   -> -1    ... should choose any of the inventory

    Also, maybe the inventory's date should be filled in automatically by the
    parser... just an idea. Maybe date doesn't have to be allowed to be nil.


  - One kind of report that would be GREAT is a single grid with all income accounts
    on the left with year by year on the horizontal. An overview of all the years.


  - Create a command to extract time series for any account, as a csv file. You
    could then easily use this for plotting!

  - The new syntax should support (ignore) org-mode headers, I need this. In
    fact, because everything starts with a date, the parser should be able to
    automatically pick up transactions from an arbitrary text file (line that
    starts with a date and a word, followed by at least one line with
    some indentation).

  - The new format code should keep and optionally render the source file/line
    of any transaction, and allow clicking to get to the source line in the
    rendering.

  - Comments should use '#' not ';' anymore, it's just more common

  - Remove @begin / @end support-- simplify, put the tags on each txn as {tag}
    instead. Simpler.

  - Inventory lots should have a date: (commodity, price, date). Use the same syntax as Ledger:
      {price} [date]

  - Rendering: When you collapse a parent account, its aggregate amount should
    render, and disappear when not collapsed

  - All entries should have collapsing a-la-JavaScript, along with
    collapse/reveal all buttons. All JS.

  - If the software is finally fast enough in Go, render RESTful on the fly for
    any date:

    * REST:  /balsheet/20121231/
    * REST:  /income/20121231/20131231/

    This way, you could have any year on the same run. No need to restart, even
    have a menu with all the years, and perhaps even some of the latest months.

  - All entries should be generic... everything should show up.

  - Each account has basically many dimensions; it would be nice to be able to
    group them as such:

      * COUNTRY: Canada, USA
      * CURRENCY: CAD, USD, other
      * TYPE: Asset, Income, Liability
      * INSTITUTION: RBC, RBC-Investment, HSBC, TD, etc.
      * SOURCE: Google, Eladian, MarketFactory, etc.
      * DESTINATION: IRS, CRA, State-NewYork, State-California

    Ideally, one should be able to generate report by querying on a subset of
    these dimensions!!

      Note: we can restrict each account to hold only a single currency, and
      encode the name of the currency in the account's name. This is reasonable.

  - Add a report for the maximum value of each account at the end of every year
    (for foreign assets decl)

  - About the discrepancy between the concept of "Payee" and a superfluous lead
    account, e.g. Internet:TimeWarner, which typically contains only
    transactions from that payee: maybe we can elide the account name if it
    contains only a single payee, or perhaps a warning may be issued? I don't
    know.

  - Tie the Ledger server to a directory hierarchy, where files can be found by
    account, automatically. Serve the files.

    * Correlate the files by uuid, e.g. if a @UUID is found in the description
      of a transaction, if a file anywhere in the document store has @UUID in
      it, a link should be rendered to view the file directly.

  - Require an @open directive for all accounts... would replace @defaccount,
    can still search the entire file for them! Simpler...

  - Problematic transactions (!) should spit something of color on stdout, they
    should not be forgotten so easily.

  - Add a diective for adding a link to a pdf document, for statements.

  - Idea: Add @close directive in order to mark the end of a specific
    account.

  - Idea: Add @comment directive in order to insert parsed comments at
    dates.

  - Idea: When an invalid check occurs and the amount is the same as
    the other but with a negative sign, you can detect this and flag
    it as an incorrect sign (a milder error) than an invalid check.

  - Idea: color entries with an inverted sign (e.g. payments in a
    liability account) differently!

  - Idea: a @check that works on differences, like a clamp on an
    income statement between two dates. This would be useful for
    OANDA, for example.

  - Find good ways to transfer data to an Excel spreadsheet

  - Generate graphs of account amounts over time
  - Include average amounts, average delta amount

  - All Ledger objects should have begin/end dates.

  - Optimize: rewrite 'wallet' in C. __iadd__ is where all the time is
    being spent.

  - Awesome idea!!! Specify a single account, and automatically select
    all the other accounts which are linked by any transaction in this
    account; generate a balance sheet from this list of accounts. e.g.
    Expenses:Trading, Income:PnL, Assets:Trading.

  - It would be really nice to render the line numbers in the HTML

  - A text rendering of the balance sheet / income statement would be
    _very_ useful for collaboration/communication with others.

  - Allow entering "Comment" fields that show up in a specific
    account's log!!

  - Add a "reason" field for @location, and display as trips, with
    some sort of meaning to them.

  - When using @@ the signs should match; warn if they don't

  - Postings that have a "!" flag should have at least their
    background red.

  - Have beancount-convert-ofx parse description NUM USD @ NUM and insert an
    appropriate line in the output, perhaps as a comment

  - beancount: Figure out problem with autopadding for beginning of a trip!

  - beancount: look at booking warnings in blais.ledger.

  - I'd love a way to filter down a journal by omitting all the small
    items and keeping just the larger ones, to get an automatic
    overview of the large amounts in a long series of transactions.
    All the small amounts could be lumped together under a special
    entry.

  - Add JavaScript menus in order to include everything from the
    top-level, so that it looks more like a real application, it'll
    look goodx (see if bean-suck still works on that).

  - Implement beginning balance sheet. Beginning and end of periods
    should be clearly indicated on both pages.

  - I need a TEXT version of the Balance Sheet, to paste in my TODO
    file.

  - You should more explicitly state the beginning and ending period
    on each statement pages (it is super important information).
    Just below the title.

  - Remove checks that are outside the postings dates, at
    render time

  - Add a pie chart to visualize the constitution of the Income
    Statement.

  - Make the conversions be applied everywhere consistently.

  - beancount: Enter trade costs with BOOK for all personal trading
    too, check that it works well. Check that capital gains
    calculations do not include commissions.

    * Add 1/rate syntax.
    * Add account numbers for classification and sorting.
    * Add a cash account flag in @defaccount, to generate the Cashflow Statement.

    * beancount: remove @checks that are outside of begin/end, it
      looks bad.

    * beancount: Make the --close place its Equity into
      RetainedEarnings rather than Opening Balances?
    * beancount: When you --close, make the balance transferred in
      RetainedEarnings rather than the OpeningBalances
    * Figure out what Yves means by "Retained Earnings", where do they
      show in my report?




app:

  - beancount: figure out how to render a wallet with 5 significant
    digits (for xrates in trades page).

price tables:

  - beancount: Make USD/CAD also specify CAD/USD in the price table;
    the lookup procedure should be able to compute the reverse prices.
  - beancount: Change the --conversion option to use rates from our
    price table instead.

graphs:

  - beancount: Generate a graph for the main kinds of account
    interchanges, by looking at the most significant transactions
    between the accounts. For example, ignore transactions which are
    too small in absolute value, or whose total is too small a portion
    of the total.


reports:

  - beancount: Available balance sheet reports should be: at begin, at
    end, both. Perhaps the "both" statement is only in report foramt.


trade booking:

  - beancount: figure out how to solve trades with share splits.



main focus:

- beancount: Add a page for the hedged values of everything.

- Finish the Capital Statement and Positions page

- Add a check to insure that parents do not contain mixed Dr and Cr
  account types as children.

- You need to write a test with dates that are close by between
  @checks and with @pad in between, for date inequalities.

- Add account numbers, to be able to sort in order of liquidity.

- 'Tag' should be renamed 'project' (pretty standard naming).





parser:

- Bug: A transaction without postings should barf.

- Bug: Invalid account names should only be reported once.

- Review the dates inequalities, incl + excl, like compsci

  * Clarify this for @check as well, it should probably be at the end
    of the day.

- make De and Cr just D and C

- Allow commas in amounts. I like commas sometimes.

- Maybe add a @defcomm directive, that checks validity for the
  commodities that are seen.

- IMPORTANT: Using the pickle, the errors only get reported when you
  parse initially. We must make the balance checks in a separate
  stage!!! Fix that, save the errors in the Ledger object and report
  them every time.

- Figure out why we get 1.0 USD when we import OFX, we should get 1.00 USD

- Accounts unused for the filtered postings could simply be removed.

- Add a syntax to convert between currencies without having to fetch
  the values by hand, e.g. "3467.02 USD in CAD".

- We may want to add a new syntax for comments that get parsed into
  entries, something like this::

    @comment <Account>
      bla bhlablablabl blabla
      bla bhlablablabl blabla
      bla bhlablablabl blabla

  This could get displayed in the register, to show significant events
  in the life of some accounts.

- Make @pad able to pad for a percentage of the total, so that we're
  able to use @pad instead of "distribution of expenses" entries.


capital gains:

- Capital gains should not count commissions nor on the buy nor on the
  sell side. How do we book them like this?  Create a small example.

- Make my Capital-Gains use the most appropriate syntax and make sure
  that the commissions aren't counted in (add a test).

    You need to do a test for capital gains.

views:

- To create custom views, for example, weekly summaries, you could
  convert the ledger into another ledger, where entries would have
  been replaced by summary entries instead, and all the other
  functionalities would still work.

- Fun little project: Create a graphviz output from a Ledger, where
  transactions above a certain amount would generate a link between
  accounts. Note:  the threshold could be either for single
  transactions, or for aggregate amounts (absolute value).


checks:

- Detect and find potential duplicates.


import:

- Modify all import scripts so that they avoid reimporting already
  imported stuff. All the import scripts should take an existing
  Ledger file as input.

- The OFX importer needs to unescape &amp; and others.

- Write a generic import routine that will try to heuristically match
  partially completed transactions from an existing Ledger.


filtering:

- We need an option to automatically add opening balances entries when
  filtering by time... this is important, otherwise the balances are
  incorrect if you don't start at the very beginning.



scripts:

- Write a script to laod the data into an SQL database.

- Figure out how to show balance to market value.

- Figure out how to do stock splits properly.

- Output reports using the debits and credits format.

- Check time ranges should also output the ranges of transactions
  present in the file.

- Add a command to print the parsed transactions register in the order
  they were read in.

- Add declarations for important dates:

  * @date 2007-01-01  'Q1 07'
  * The date parsing should automatically recognize these

- Add directives specific to conversion scripts as well::

     @defvar ofx accid 000016726282       Assets:Current:RBC:Checking

     @defvar paypal acc_sales    Income:Book-Sales
     @defvar paypal acc_deposit  Assets:Current:PayPal
     @defvar paypal acc_fee      Expenses:Financial:Commissions:PayPal



tests:

- Test Wallet += None

- Write functional tests
- Write automated tests for everything.


doc/examples/demos:

- Make a presentation

- Write simple documentation, maybe tests should be part of the
  documentation?

- Create an 'examples' subdirectory, with typical use cases.

- Examples:

  - mortgage, buying a home
  - capital gains (with commissions correctly)
  - cie expenses, the way I'm doing it.
  - misc, e.g. credit card

- Include examples

- This is causing me a problem::

    2008-02-14 * FUNDS TRANSFER
      Assets:Current:RBC:Checking-US                                -89050.66 USD @ 0.9901 CAD
      Assets:Current:RBC:Savings                                     88169.06 CAD

  The costs are::

    2008-02-14 * FUNDS TRANSFER
      Assets:Current:RBC:Checking-US                                -88169.06 CAD
      Assets:Current:RBC:Savings                                     88169.06 CAD

  So when I show the balance sheet "at cost", it shows the account
  Assets:Current:RBC:Checking-US as having had some CAD debited from
  it.



serve:

- Implement buffered output for faster response using a separate
  thread and an iterator that yields from app.write when the data
  buffer is large enough.

- Make it possible to upload a new file to the server to be parsed.
  This way, I wouldn't even have to log in ssh in order to update the
  in-memory database...

- BUG: There is a JavaScrap bug with collapsing the tree nodes in the
  ranges page.

- We really should display the code/check number in the web register
  output.


reporting:

- Implement `--code-as-payee' combined with `--by-payee', this
  provides an interesting view.

  Implement a view ...

  * By code
  * By payee




Ideas
=====

- Create a script to support generating lists of file locations for
  navigating the input file in a certain order.

    Let's say that I would want to inspect the input for some
    arbitrary list of filtered transactions that relate to
    postings: all I have to do is write a script that outputs
    "errors" in a way that Emacs knows to parse, and then
    'next-error and 'previous-error takes my cursor there with
    a single keystroke!

- Not sure if we need this with the @imported directive, but how about
  a special field in the transaction's posting::

    Assets:Investments:HSBC-Broker           -100 IVV @@ 136.2901 USD  {HD7egE62}
    Income:Investment:Capital-Gains

  This special kind of id would get computed in a uniform way from the
  date and the account being imported, so that we could check if this
  posting or transaction had already been imported before.

- Add directives to support import::

   @imported <FROMDATE> <TODATE> <ACCOUNT>

  Using the intersection of these date intervals and the account name,
  you can determine what has already been imported and avoid importing
  twice.

  * We need central support for these tasks as well.
  * The conversion scripts should always parse a ledger file.

- You should be able to click on dates and see all postings by date
  too.

- You should be able to click on a payee to view its transactions.




Links
-----

Description of a data model very similar to my idea.
http://homepages.tcp.co.uk/~m-wigley/gc_wp_ded.html





Redesign
========

Here is an idea for a redesign:

  The Ledger object should always contain all the transactions.
  Instead of filtering the postings on input, you should create
  specialized iterator objects that are used to filter the postings on
  the fly. This would allow removing all the special shit that needs
  to be ordered correctly, that happens at load-time.



Idea for Integrating the Cost Basis in Beancount
================================================

- Every account carries a cost basis.

- You can have posting with or without a cost-basis.

- If the posting has a cost-basis posting, the cost-basis is used to balance the
  transaction.

- As you sum up the postings in the account, keep track of the full inventory as

    (commodity, cost) -> quantity

  As a special case, "cost" can be null. This is the case where there is no cost
  tracking for this commodity item. We maintain the full inventory of positions
  with a cost basis in the account; as a default case, the cost is null.

- BALANCE CHECK: When balancing a transaction, if an amount has an associated
  cost basis, use the cost basis instead of the actual amount to balance.

- INVENTORY CHECK: When a position is modified in the inverse direction,
  require a cost to book against. If no cost is specified, it just degrades to
  decrease from the bucket of commodities with a null cost (it all works out!)

- ZERO CHECK: Insure that the quantity can never be negative for any bucket.

- Optional extended check syntax: You could extend the @check syntax to include
  the cost, so that technically you could check that there are a specific number



2013-03-01 * buy
  Assets:Checking        10 GOOG # 700 USD
  Assets:Investment     -7000 USD

2013-03-15 * sell
  Assets:Checking       -10 GOOG # 700 USD @ 800 USD
  Income:RealizedPnL    -1000 USD
  Assets:Investment      8000 USD


Syntax

Test: Items of the same kind with and without cost basis
Test: Multiple items of different types with a cost basis in the same account
